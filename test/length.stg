zero = CON(I 0);
one = CON(I 1);
nil = CON(Nil);
list1 = CON(Cons one nil);
list2 = CON(Cons one list1);
list3 = CON(Cons zero list2);
list4 = THUNK(append list3 list3);
list5 = THUNK(append list4 list4);
addInt = FUN(x y -> 
           case x of 
              { I i -> 
                  case y of 
                     { I j -> let { a = THUNK(plus i j);
                                    result = CON(I a) }
                              in result }});

print = FUN(x -> case x of { I i -> printInt i });

len = FUN (list -> 
         case list of {
            Nil -> zero;
            Cons hd tl -> let { rec = THUNK(len tl) } in addInt rec one
         });

append = FUN(l1 l2 -> 
            case l1 of
               { Nil -> l2;
                 Cons hd tl -> let { rec = THUNK(append tl l2);
                                     result = CON(Cons hd rec) }
                               in result });

main = THUNK (len list5)
